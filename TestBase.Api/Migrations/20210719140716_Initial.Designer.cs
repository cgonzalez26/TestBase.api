// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestBase.Api.Models;
using NetTopologySuite.Geometries;

namespace TestBase.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210719140716_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestBase.Api.Models.Permisos.Permiso", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Permisos");

                    b.HasData(
                        new
                        {
                            Id = "PAGES_HOME",
                            Descripcion = "Inicio",
                            IsDeleted = false,
                            Nombre = "Inicio",
                            Orden = 100
                        },
                        new
                        {
                            Id = "PAGES_MANAGEMENT",
                            Descripcion = "Administración",
                            IsDeleted = false,
                            Nombre = "Administración",
                            Orden = 200
                        },
                        new
                        {
                            Id = "PAGES_MANAGEMENT_ESTABLECIMIENTOS",
                            Descripcion = "Administración > Establecimientos",
                            IsDeleted = false,
                            Nombre = "Administración > Establecimientos",
                            Orden = 300
                        },
                        new
                        {
                            Id = "PAGES_MANAGEMENT_ESTABLECIMIENTOS_ADD",
                            Descripcion = "Administración > Establecimientos > Agregar Establecimiento",
                            IsDeleted = false,
                            Nombre = "Administración > Establecimientos > Agregar Establecimiento",
                            Orden = 301
                        },
                        new
                        {
                            Id = "PAGES_MANAGEMENT_ESTABLECIMIENTOS_EDIT",
                            Descripcion = "Administración > Establecimientos > Editar Establecimiento",
                            IsDeleted = false,
                            Nombre = "Administración > Establecimientos > Editar Establecimiento",
                            Orden = 302
                        },
                        new
                        {
                            Id = "PAGES_MANAGEMENT_ESTABLECIMIENTOS_DELETE",
                            Descripcion = "Administración > Establecimientos > Eliminar Establecimiento",
                            IsDeleted = false,
                            Nombre = "Administración > Establecimientos > Eliminar Establecimiento",
                            Orden = 303
                        },
                        new
                        {
                            Id = "PAGES_SECURITY",
                            Descripcion = "Seguridad",
                            IsDeleted = false,
                            Nombre = "Seguridad",
                            Orden = 400
                        },
                        new
                        {
                            Id = "PAGES_SECURITY_ROLES_AND_PERMISSIONS",
                            Descripcion = "Seguridad > Roles y Permisos",
                            IsDeleted = false,
                            Nombre = "Seguridad > Roles y Permisos",
                            Orden = 500
                        },
                        new
                        {
                            Id = "PAGES_SECURITY_ROLES_AND_PERMISSIONS_ADD",
                            Descripcion = "Seguridad > Roles y Permisos > Agregar Rol",
                            IsDeleted = false,
                            Nombre = "Seguridad > Roles y Permisos > Agregar Rol",
                            Orden = 501
                        },
                        new
                        {
                            Id = "PAGES_SECURITY_ROLES_AND_PERMISSIONS_EDIT",
                            Descripcion = "Seguridad > Roles y Permisos > Editar Rol",
                            IsDeleted = false,
                            Nombre = "Seguridad > Roles y Permisos > Editar Rol",
                            Orden = 502
                        },
                        new
                        {
                            Id = "PAGES_SECURITY_ROLES_AND_PERMISSIONS_DELETE",
                            Descripcion = "Seguridad > Roles y Permisos > Eliminar Rol",
                            IsDeleted = false,
                            Nombre = "Seguridad > Roles y Permisos > Eliminar Rol",
                            Orden = 503
                        });
                });

            modelBuilder.Entity("TestBase.Api.Models.RolPermisos.RolPermiso", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PermisoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("RolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("PermisoId");

                    b.HasIndex("RolId");

                    b.ToTable("RolPermisos");

                    b.HasData(
                        new
                        {
                            Id = "ID_SA_PH",
                            IsDeleted = false,
                            PermisoId = "PAGES_HOME",
                            RolId = "COD_ADMIN"
                        },
                        new
                        {
                            Id = "ID_SA_PM",
                            IsDeleted = false,
                            PermisoId = "PAGES_MANAGEMENT",
                            RolId = "COD_ADMIN"
                        },
                        new
                        {
                            Id = "ID_SA_PM_ES",
                            IsDeleted = false,
                            PermisoId = "PAGES_MANAGEMENT_ESTABLECIMIENTOS",
                            RolId = "COD_ADMIN"
                        },
                        new
                        {
                            Id = "ID_SA_PM_ES_ADD",
                            IsDeleted = false,
                            PermisoId = "PAGES_MANAGEMENT_ESTABLECIMIENTOS_ADD",
                            RolId = "COD_ADMIN"
                        },
                        new
                        {
                            Id = "ID_SA_PM_ES_EDIT",
                            IsDeleted = false,
                            PermisoId = "PAGES_MANAGEMENT_ESTABLECIMIENTOS_EDIT",
                            RolId = "COD_ADMIN"
                        },
                        new
                        {
                            Id = "ID_SA_PM_ES_DELETE",
                            IsDeleted = false,
                            PermisoId = "PAGES_MANAGEMENT_ESTABLECIMIENTOS_DELETE",
                            RolId = "COD_ADMIN"
                        },
                        new
                        {
                            Id = "ID_SA_PS",
                            IsDeleted = false,
                            PermisoId = "PAGES_SECURITY",
                            RolId = "COD_ADMIN"
                        },
                        new
                        {
                            Id = "ID_SA_PS_RP",
                            IsDeleted = false,
                            PermisoId = "PAGES_SECURITY_ROLES_AND_PERMISSIONS",
                            RolId = "COD_ADMIN"
                        },
                        new
                        {
                            Id = "ID_SA_PS_RP_ADD",
                            IsDeleted = false,
                            PermisoId = "PAGES_SECURITY_ROLES_AND_PERMISSIONS_ADD",
                            RolId = "COD_ADMIN"
                        },
                        new
                        {
                            Id = "ID_SA_PS_RP_EDIT",
                            IsDeleted = false,
                            PermisoId = "PAGES_SECURITY_ROLES_AND_PERMISSIONS_EDIT",
                            RolId = "COD_ADMIN"
                        },
                        new
                        {
                            Id = "ID_SA_PS_RP_DELETE",
                            IsDeleted = false,
                            PermisoId = "PAGES_SECURITY_ROLES_AND_PERMISSIONS_DELETE",
                            RolId = "COD_ADMIN"
                        });
                });

            modelBuilder.Entity("TestBase.Api.Models.Roles.Rol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "COD_ADMIN",
                            Descripcion = "Super Admin",
                            IsDeleted = false,
                            Nombre = "Super Admin"
                        });
                });

            modelBuilder.Entity("TestBase.Api.Models.TipoZonas.TipoZona", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("TipoZonas");
                });

            modelBuilder.Entity("TestBase.Api.Models.Zonas.Zona", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("FullId")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<Geometry>("Geometria")
                        .HasColumnType("geography");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PadreId")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("TipoZonaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("PadreId");

                    b.HasIndex("TipoZonaId");

                    b.ToTable("Zonas");
                });

            modelBuilder.Entity("TestBase.Api.Models.RolPermisos.RolPermiso", b =>
                {
                    b.HasOne("TestBase.Api.Models.Permisos.Permiso", "Permiso")
                        .WithMany("RolPermisos")
                        .HasForeignKey("PermisoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBase.Api.Models.Roles.Rol", "Rol")
                        .WithMany("RolPermisos")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestBase.Api.Models.Zonas.Zona", b =>
                {
                    b.HasOne("TestBase.Api.Models.Zonas.Zona", "Padre")
                        .WithMany()
                        .HasForeignKey("PadreId");

                    b.HasOne("TestBase.Api.Models.TipoZonas.TipoZona", "TipoZona")
                        .WithMany("Zonas")
                        .HasForeignKey("TipoZonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
